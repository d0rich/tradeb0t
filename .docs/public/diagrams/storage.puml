@startuml
interface ITypedTransformer<TEntity, TDatabase> {
    +to: (entityValue: TEntity) => TDatabase
    +from: (databaseValue: TDatabase) => TEntity
}
class AlgorithmsRepository extends Repository
class AlgorithmRunsRepository extends Repository {
    +runOne(algorithmName: string, inputs: unknown, state?: unknown): Promise<AlgorithmRun>
    +saveProgress(id: number, state: unknown): Promise<AlgorithmRun>
    +loadProgress(id: number): Promise<any>
    +stopOne(id: number): Promise<AlgorithmRun>
    +resumeOne(id: number): Promise<AlgorithmRun>
    +finishOne(id: number): Promise<AlgorithmRun>
    +storeError(id: number, error: Error): Promise<AlgorithmRun>
    +findManyByAlgorithm(algorithmName: string): Promise<AlgorithmRun[]>
    +findAllUnfinished(): Promise<AlgorithmRun[]>
}
interface IOrdersRepositoryHooks {
    +beforeSaveOne: (ticker: string) => Promise<void>
}
class OrdersRepository extends Repository {
    +hooks: Hookable<IOrdersRepositoryHooks, "beforeSaveOne">
    +saveOne(order: GetOrderType<CommonDomain>, operation: OperationType, runId?: number): Promise<GetOrderType<CommonDomain>>
    +search(options: GetOrdersOptions): Promise<GetOrderType<CommonDomain>[]>
}
interface IPersistentStorage {
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
class PersistentStorage implements IPersistentStorage {
    +isInitialized: boolean
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    -_orders: OrdersRepository
    -_algorithms: AlgorithmsRepository
    -_algorithmRuns: AlgorithmRunsRepository
    -id: string
    +initialize(): Promise<void>
    -datasource: DataSource
}
class SecuritiesRepository extends Repository {
    +findByTicker(securityTicker: string): Promise<Security>
    +findByTickers(securityTickers: string[]): Promise<Security[]>
    +findAllFollowed(): Promise<Security[]>
    +follow(securityTicker: string): Promise<any>
    +unfollow(securityTicker: string): Promise<any>
    +updateAll(securities: Security[]): Promise<void>
}
class PortfolioRepository extends Repository {
    +securities: Repository<SecurityBalance>
    +currencies: Repository<CurrencyBalance>
    +findPositions(options?: FindManyOptions<AssetBalance>): Promise<any[]>
}
class CurrenciesRepository extends Repository {
    +findByTicker(currencyTicker: string): Promise<Currency>
    +updateAll(currencies: Currency[]): Promise<void>
}
interface IInMemoryStorage {
    +securities: SecuritiesRepository
    +portfolio: PortfolioRepository
    +currencies: CurrenciesRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
class InMemoryStorage implements IInMemoryStorage {
    +isInitialized: boolean
    +securities: SecuritiesRepository
    +currencies: CurrenciesRepository
    +portfolio: PortfolioRepository
    -_securities: SecuritiesRepository
    -_portfolio: PortfolioRepository
    -_currencies: CurrenciesRepository
    -datasource: DataSource
    +initialize(): Promise<void>
}
class UnitedStorage implements IPersistentStorage, IInMemoryStorage {
    +isInitialized: boolean
    +currencies: CurrenciesRepository
    +portfolio: PortfolioRepository
    +securities: SecuritiesRepository
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    -_persistent: IPersistentStorage
    -_memory: IInMemoryStorage
    -id: string
    +initialize(): Promise<void>
}
OrdersRepository --> "1" IOrdersRepositoryHooks
IPersistentStorage --> "1" OrdersRepository
IPersistentStorage --> "1" AlgorithmsRepository
IPersistentStorage --> "1" AlgorithmRunsRepository
PersistentStorage --> "1" OrdersRepository
PersistentStorage --> "1" AlgorithmsRepository
PersistentStorage --> "1" AlgorithmRunsRepository
IInMemoryStorage --> "1" SecuritiesRepository
IInMemoryStorage --> "1" PortfolioRepository
IInMemoryStorage --> "1" CurrenciesRepository
InMemoryStorage --> "1" SecuritiesRepository
InMemoryStorage --> "1" CurrenciesRepository
InMemoryStorage --> "1" PortfolioRepository
UnitedStorage --> "1" CurrenciesRepository
UnitedStorage --> "1" PortfolioRepository
UnitedStorage --> "1" SecuritiesRepository
UnitedStorage --> "1" OrdersRepository
UnitedStorage --> "1" AlgorithmsRepository
UnitedStorage --> "1" AlgorithmRunsRepository
UnitedStorage --> "1" IPersistentStorage
UnitedStorage --> "1" IInMemoryStorage
@enduml