@startuml
interface ITypedTransformer<TEntity, TDatabase> {
    +to: (entityValue: TEntity) => TDatabase
    +from: (databaseValue: TDatabase) => TEntity
}
interface ITradeModule<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>> {
    +sell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +buy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketSell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketBuy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +sellOrCancel(): Promise<GetOrderType<Domain>>
    +buyOrCancel(): Promise<GetOrderType<Domain>>
}
interface IInfoModule<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>> {
    +getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string, ignoreCache?: boolean | undefined): Promise<GetSecurityBalanceType<Domain> | null>
    +getSecurityByExchangeId(id: string, ignoreCache?: boolean | undefined): Promise<GetSecurityBalanceType<Domain> | null>
}
interface IExchangeConnector<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
abstract class AbstractTradeModule<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements ITradeModule {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} sell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} buy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketSell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketBuy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} sellOrCancel(): Promise<GetOrderType<Domain>>
    +{abstract} buyOrCancel(): Promise<GetOrderType<Domain>>
}
abstract class AbstractInfoModule<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IInfoModule {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +{abstract} getSecurityLastPrice(ticker: string): Promise<number>
    +{abstract} getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +{abstract} getSecurityName(ticker: string): Promise<string>
    +{abstract} getSecurity(ticker: string, ignoreCache?: boolean | undefined): Promise<GetSecurityType<Domain> | null>
    +{abstract} getSecurityByExchangeId(id: string, ignoreCache?: boolean | undefined): Promise<GetSecurityType<Domain> | null>
}
abstract class AbstractExchangeConnector<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IExchangeConnector {
    -_isAccountInitialized: boolean
    +isAccountInitialized: boolean
    #isAccountInitialized: boolean
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    #{abstract} initAccount(): Promise<unknown>
    +{abstract} getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +{abstract} getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
class Algorithm {
    +name: string
    +description: string
    +inputTypes: InputTypes
    +algorithmRuns?: AlgorithmRun<any, any>[] | undefined
}
interface GetOrdersOptions extends ZGetOrdersOptions
class Order {
    +exchangeId: string
    +securityTicker: string
    +status: OrderStatus
    +operation: "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel"
    +lots: number
    +price: number
    +updatedAt?: Date | undefined
    +algorithmRunId?: number | undefined
    +algorithmRun?: AlgorithmRun<any, any> | undefined
}
class AlgorithmRun<InputType, StateType> {
    +id: number
    +algorithmName: string
    +inputs: InputType
    +status: AlgorithmRunStatus
    +state: StateType
    +updatedAt: Date
    +createdAt: Date
    +algorithm: Algorithm
    +orders: Order[]
}
interface Currency {
    +name: string
    +ticker: string
    +exchangeTicker: string
}
interface CurrencyBalance {
    +type: "currency"
    +currencyTicker: string
    +amount: number
}
interface SecurityBalance {
    +type: "security"
    +securityTicker: string
    +amount: number
}
interface Security {
    +name: string
    +ticker: string
    +price: number
    +currencyTicker: string
}
abstract class AbstractDomainMapper<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IDomainMapper {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} currency(currency: GetCurrencyType<Domain>): Promise<Currency>
    +{abstract} currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<CurrencyBalance>
    +{abstract} security(security: GetSecurityType<Domain>): Promise<Security>
    +{abstract} securityBalance(portfolio: GetSecurityBalanceType<Domain>): Promise<SecurityBalance>
    +{abstract} order(order: GetOrderType<Domain>): Promise<Order>
    +{abstract} orderStatus(order: GetOrderType<Domain>): OrderStatus
    +{abstract} orderOperation(order: GetOrderType<Domain>): "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel"
}
interface IDomainMapper<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>> {
    +currency(currency: GetCurrencyType<Domain>): Promise<Currency>
    +currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<CurrencyBalance>
    +security(security: GetSecurityType<Domain>): Promise<Security>
    +securityBalance(security: GetSecurityBalanceType<Domain>): Promise<SecurityBalance>
    +order(order: GetOrderType<Domain>): Promise<Order>
    +orderStatus(order: GetOrderType<Domain>): OrderStatus
    +orderOperation(order: GetOrderType<Domain>): "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel"
}
class AlgorithmsRepository extends Repository
class AlgorithmRunsRepository extends Repository {
    +runOne(algorithmName: string, inputs: unknown, state?: unknown): Promise<AlgorithmRun<any, any>>
    +saveProgress(id: number, state: unknown): Promise<AlgorithmRun<any, any>>
    +loadProgress(id: number): Promise<AlgorithmRun<any, any> | null>
    +stopOne(id: number): Promise<AlgorithmRun<any, any>>
    +resumeOne(id: number): Promise<AlgorithmRun<any, any>>
    +finishOne(id: number): Promise<AlgorithmRun<any, any>>
    +storeError(id: number, error: Error): Promise<AlgorithmRun<any, any>>
    +findManyByAlgorithm(algorithmName: string): Promise<AlgorithmRun<any, any>[]>
    +findAllUnfinished(): Promise<AlgorithmRun<any, any>[]>
}
class OrdersRepository extends Repository {
    +saveOne(order: Order, operation: "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel", runId?: number | undefined): Promise<Order>
    +search(options: GetOrdersOptions): Promise<Order[]>
}
interface IPersistentStorage {
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
}
class PersistentStorage implements IPersistentStorage {
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    -datasource: DataSource
    -initDatasource(id: string): DataSource
}
class PortfolioStore {
    -items: PortfolioPosition[]
    -securitiesStore: SecuritiesStore
    -findPosition(position: PortfolioPosition, searchIn?: PortfolioPosition[]): PortfolioPosition | undefined
    +setSecuritiesStore(store: SecuritiesStore): void
    +portfolio: PortfolioPosition[]
    +currencies: CurrencyBalance[]
    +securities: SecurityBalance[]
    +updatePositions(positions: PortfolioPosition[]): void
    +updatePositionsAll(positions: PortfolioPosition[]): void
}
class SecuritiesStore {
    -items: Security[]
    -followList: string[]
    -updateJournal: Map<string, Date>
    -portfolioStore: PortfolioStore
    +setPortfolioStore(store: PortfolioStore): void
    +securities: Security[]
    +followedSecurities: Security[]
    +securitiesWithUpdates: { updatedAt: Date | undefined; name: string; ticker: string; price: number; currencyTicker: string; }[]
    +follow(securityTicker: string): Security | undefined
    +unfollow(securityTicker: string): Security | undefined
    +updateSecurities(securities: Security[]): void
    +getBalanceOf(securityTicker: string): SecurityBalance | undefined
}
class CurrenciesStore {
    -items: Currency[]
    -portfolioStore: PortfolioStore
    +setPortfolioStore(store: PortfolioStore): void
    +currencies: Currency[]
    +updateCurrenciesAll(currencies: Currency[]): void
    +getBalanceOf(currencyTicker: string): CurrencyBalance | undefined
}
class TradeBotStore {
    +securitiesStore: SecuritiesStore
    +portfolioStore: PortfolioStore
    +currenciesStore: CurrenciesStore
}
interface ITradeAlgorithm<InputsType, StateType> {
    +details: Algorithm
    +name: string
    +description: string
    +inputs: InputTypes
    +main(inputs: InputsType): Promise<AlgorithmRun<InputsType, StateType>>
    +continue(id: number): Promise<AlgorithmRun<InputsType, StateType>>
    +stop(id: number): Promise<AlgorithmRun<InputsType, StateType>>
}
interface ITradeAlgorithmsEngine {
    +description: Algorithm[]
    +runAlgorithm(name: string, inputs: unknown): Promise<AlgorithmRun<any, any>>
    +resumeAlgorithms(): Promise<void>
    +continueAlgorithm(name: string, run_id: number): Promise<AlgorithmRun<any, any>>
    +stopAlgorithm(name: string, run_id: number): Promise<AlgorithmRun<any, any>>
}
interface IExpressAppCarrier {
    +app: Application
}
class ApiService {
    -tradeBot: ITradeBot<StubDomain, unknown>
    -express: Express
    -wss: ws.WebSocketServer
    -http: http.Server
    -configureServers(): Promise<void>
}
interface IHttpHeadersCarrier {
    +headers: IncomingHttpHeaders
}
class AuthService {
    -botToken: string
    +authByToken(token?: string): boolean
    +authByRequest(request: IHttpHeadersCarrier): boolean
}
interface SocketLogs {
    +robot_id: string
    +type: "error" | "info" | "warning"
    +message: string
    +attachment?: unknown
    +algorithm?: { name: string; run_id?: number | undefined; inputs?: unknown; state?: unknown; } | undefined
    +timestamp: string
}
class LoggerService {
    -tradebot: ITradeBot<any, any>
    -logger: Logger
    -lastLogs: SocketLogs[]
    -eventEmitter: EventEmitter
    -createLogsDirIfNotExist(): void
    -logToString(log: SocketLogs, __1?: { useColors?: boolean | undefined; showRobotId?: boolean | undefined; showType?: boolean | undefined; showTimestamp?: boolean | undefined; showAlgorithmName?: boolean | undefined; showAlgorithmRunId?: boolean | undefined; showAlgorithmState?: boolean | undefined; showAttachment?: boolean | undefined; }): string
    -logToFile(log: SocketLogs): void
    -logToConsole(log: SocketLogs): void
    -logToSocket(log: SocketLogs): void
    -updateLastLogs(log: SocketLogs): void
    +getLastLogs(): SocketLogs[]
    +log(body: Omit<Omit<SocketLogs, "robot_id">, "timestamp">, __1?: { internal?: boolean | undefined; }): void
    +subscribe(callback: (logs: SocketLogs) => void): void
    +unsubscribe(callback: (logs: SocketLogs) => void): void
}
interface ITradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher<Domain>
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
}
class TradeAlgorithmsEngine<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements ITradeAlgorithmsEngine {
    #analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    #trader: IExchangeTrader
    #watcher: IExchangeWatcher<Domain>
    #tradebot: ITradeBot<Domain, TExchangeApi>
    #algorithms: ITradeAlgorithm<unknown, unknown>[]
    +description: Algorithm[]
    +runAlgorithm(name: string, inputs: unknown): Promise<AlgorithmRun<any, any>>
    +resumeAlgorithms(): Promise<void>
    +continueAlgorithm(name: string, id: number): Promise<AlgorithmRun<any, any>>
    +stopAlgorithm(name: string, id: number): Promise<AlgorithmRun<any, any>>
}
interface IExchangeTrader {
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string | undefined, run_id?: number | undefined): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string | undefined, run_id?: number | undefined): Promise<OrderStatus>
}
interface IExchangeWatcher<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>> {
    +getPortfolio(): Promise<SecurityBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
    +getCurrencies(): Promise<Currency[]>
    +getSecurity(ticker: string): Promise<Security>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<Currency>
    +onOrderSent(order: GetOrderType<Domain>, operation_type: "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel", runId?: number | undefined): OrderStatus
}
interface IExchangeAnalyzer<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: IPersistentStorage
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher<Domain>
    +start(): Promise<void>
    +updateCurrencies(): Promise<Currency[]>
    +getCurrencies(): Promise<Currency[]>
    +updateCurrenciesBalance(): Promise<CurrencyBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
    +updateSecurities(): Promise<Security[]>
    +getSecurities(): Promise<Security[]>
    +getSecurity(ticker: string): Promise<Security>
    +addSecurities(securities: Security[]): Promise<Security[]>
    +getFollowedSecurities(): Promise<Security[]>
    +followSecurity(securityTicker: string): Promise<Security | undefined>
    +unfollowSecurity(securityTicker: string): Promise<Security | undefined>
    +updateFollowedSecurities(): Promise<Security[]>
    +updatePortfolio(): Promise<(CurrencyBalance | SecurityBalance)[]>
    +getPortfolio(): Promise<(CurrencyBalance | SecurityBalance)[]>
    +clearPortfolio(): Promise<number>
}
class ExchangeAnalyzer<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IExchangeAnalyzer {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: PersistentStorage
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher<Domain>
    +start(): Promise<void>
    -initUpdaters(): Promise<void>
    -loadSecurityIfNotExist(ticker: string): Promise<Security | undefined>
    -loadSecuritiesIfNotExist(tickers: string[]): Promise<Security[]>
    +updateCurrencies(): Promise<Currency[]>
    +getCurrencies(): Promise<Currency[]>
    +updateCurrenciesBalance(): Promise<CurrencyBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
    +updateSecurities(): Promise<Security[]>
    +getSecurities(): Promise<Security[]>
    +getSecurity(ticker: string): Promise<Security>
    +addSecurities(securities: Security[]): Promise<Security[]>
    +getFollowedSecurities(): Promise<Security[]>
    +followSecurity(securityTicker: string): Promise<Security | undefined>
    +unfollowSecurity(securityTicker: string): Promise<Security | undefined>
    +updateFollowedSecurities(): Promise<Security[]>
    +updatePortfolio(): Promise<(CurrencyBalance | SecurityBalance)[]>
    +getPortfolio(): Promise<(CurrencyBalance | SecurityBalance)[]>
    +clearPortfolio(): Promise<number>
}
class ExchangeTrader<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IExchangeTrader {
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -watcher: IExchangeWatcher<Domain>
    -logger: LoggerService
    -exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string | undefined, run_id?: number | undefined): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string | undefined, run_id?: number | undefined): Promise<OrderStatus>
}
class ExchangeWatcher<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IExchangeWatcher {
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -domainMapper: IDomainMapper<StubDomain>
    -analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -trader: IExchangeTrader
    -exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +getPortfolio(): Promise<SecurityBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
    +getCurrencies(): Promise<Currency[]>
    +getSecurity(ticker: string): Promise<Security>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<Currency>
    +onOrderSent(order: GetOrderType<Domain>, operation_type: "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel", runId?: number | undefined): OrderStatus
}
class TradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements ITradeBot {
    -_exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    -_analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -_trader: IExchangeTrader
    -_watcher: IExchangeWatcher<Domain>
    -_api: ApiService
    -_logger: LoggerService
    -_auth: AuthService
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher<Domain>
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
    -setup(__0: { exchangeClient: IExchangeConnector<Domain, TExchangeApi>; botToken?: string | undefined; initAlgorithmsCallback?: ((analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]) | undefined; }): Promise<void>
}
abstract class AbstractTradeAlgorithm<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi, InputsType, StateType, StopDataType> implements ITradeAlgorithm {
    #analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    #watcher: IExchangeWatcher<Domain>
    #trader: IExchangeTrader
    #stopData: Map<number, StopDataType>
    -logger: LoggerService
    +details: Algorithm
    #fixStart(inputs: InputsType, state: StateType): Promise<AlgorithmRun<any, any>>
    #fixStop(id: number): Promise<AlgorithmRun<any, any>>
    #fixContinue(id: number): Promise<AlgorithmRun<any, any>>
    #fixFinish(id: number): Promise<AlgorithmRun<any, any>>
    #fixError(id: number, error: Error): Promise<AlgorithmRun<any, any>>
    #saveProgress(id: number, progress: StateType): Promise<AlgorithmRun<any, any>>
    #loadProgress(id: number): Promise<AlgorithmRun<any, any>>
    +{abstract} name: string
    +{abstract} description: string
    +{abstract} inputs: InputTypes
    +{abstract} main(inputs: InputsType): Promise<AlgorithmRun<InputsType, StateType>>
    +{abstract} continue(id: number): Promise<AlgorithmRun<InputsType, StateType>>
    +{abstract} stop(id: number): Promise<AlgorithmRun<InputsType, StateType>>
}
IExchangeConnector --> "1" ITradeModule
IExchangeConnector --> "1" IInfoModule
IExchangeConnector --> "1" IDomainMapper
AbstractTradeModule --> "1" IExchangeConnector
AbstractInfoModule --> "1" IExchangeConnector
AbstractExchangeConnector --> "1" ITradeModule
AbstractExchangeConnector --> "1" IInfoModule
AbstractExchangeConnector --> "1" IDomainMapper
Algorithm --> "1" AlgorithmRun
Order --> "1" AlgorithmRun
AlgorithmRun --> "1" Algorithm
AlgorithmRun --> "*" Order
AbstractDomainMapper --> "1" IExchangeConnector
AbstractDomainMapper --> "1" Currency
AbstractDomainMapper --> "1" CurrencyBalance
AbstractDomainMapper --> "1" Security
AbstractDomainMapper --> "1" SecurityBalance
AbstractDomainMapper --> "1" Order
IDomainMapper --> "1" Currency
IDomainMapper --> "1" CurrencyBalance
IDomainMapper --> "1" Security
IDomainMapper --> "1" SecurityBalance
IDomainMapper --> "1" Order
AlgorithmRunsRepository --> "1" AlgorithmRun
OrdersRepository --> "1" Order
OrdersRepository --> "1" GetOrdersOptions
OrdersRepository --> "*" Order
IPersistentStorage --> "1" OrdersRepository
IPersistentStorage --> "1" AlgorithmsRepository
IPersistentStorage --> "1" AlgorithmRunsRepository
PersistentStorage --> "1" OrdersRepository
PersistentStorage --> "1" AlgorithmsRepository
PersistentStorage --> "1" AlgorithmRunsRepository
PortfolioStore --> "1" SecuritiesStore
PortfolioStore --> "*" CurrencyBalance
PortfolioStore --> "*" SecurityBalance
SecuritiesStore --> "*" Security
SecuritiesStore --> "1" PortfolioStore
SecuritiesStore --> "1" Security
SecuritiesStore --> "1" SecurityBalance
CurrenciesStore --> "*" Currency
CurrenciesStore --> "1" PortfolioStore
CurrenciesStore --> "1" Currency
CurrenciesStore --> "1" CurrencyBalance
TradeBotStore --> "1" SecuritiesStore
TradeBotStore --> "1" PortfolioStore
TradeBotStore --> "1" CurrenciesStore
ITradeAlgorithm --> "1" Algorithm
ITradeAlgorithm --> "1" AlgorithmRun
ITradeAlgorithmsEngine --> "*" Algorithm
ITradeAlgorithmsEngine --> "1" AlgorithmRun
ApiService --> "1" ITradeBot
AuthService --> "1" IHttpHeadersCarrier
LoggerService --> "1" ITradeBot
LoggerService --> "*" SocketLogs
LoggerService --> "1" SocketLogs
ITradeBot --> "1" IExchangeConnector
ITradeBot --> "1" IExchangeAnalyzer
ITradeBot --> "1" IExchangeTrader
ITradeBot --> "1" IExchangeWatcher
ITradeBot --> "1" ApiService
ITradeBot --> "1" LoggerService
ITradeBot --> "1" AuthService
TradeAlgorithmsEngine --> "1" IExchangeAnalyzer
TradeAlgorithmsEngine --> "1" IExchangeTrader
TradeAlgorithmsEngine --> "1" IExchangeWatcher
TradeAlgorithmsEngine --> "1" ITradeBot
TradeAlgorithmsEngine --> "1" ITradeAlgorithm
TradeAlgorithmsEngine --> "*" Algorithm
TradeAlgorithmsEngine --> "1" AlgorithmRun
IExchangeWatcher --> "*" SecurityBalance
IExchangeWatcher --> "*" CurrencyBalance
IExchangeWatcher --> "*" Currency
IExchangeWatcher --> "1" Security
IExchangeWatcher --> "1" Currency
IExchangeAnalyzer --> "1" ITradeAlgorithmsEngine
IExchangeAnalyzer --> "1" IPersistentStorage
IExchangeAnalyzer --> "1" ITradeBot
IExchangeAnalyzer --> "1" IExchangeTrader
IExchangeAnalyzer --> "1" IExchangeWatcher
IExchangeAnalyzer --> "*" Currency
IExchangeAnalyzer --> "*" CurrencyBalance
IExchangeAnalyzer --> "*" Security
IExchangeAnalyzer --> "1" Security
IExchangeAnalyzer --> "1" CurrencyBalance
IExchangeAnalyzer --> "1" SecurityBalance
ExchangeAnalyzer --> "1" ITradeAlgorithmsEngine
ExchangeAnalyzer --> "1" PersistentStorage
ExchangeAnalyzer --> "1" ITradeBot
ExchangeAnalyzer --> "1" IExchangeTrader
ExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" Security
ExchangeAnalyzer --> "*" Security
ExchangeAnalyzer --> "*" Currency
ExchangeAnalyzer --> "*" CurrencyBalance
ExchangeAnalyzer --> "1" CurrencyBalance
ExchangeAnalyzer --> "1" SecurityBalance
ExchangeTrader --> "1" ITradeBot
ExchangeTrader --> "1" IExchangeWatcher
ExchangeTrader --> "1" LoggerService
ExchangeTrader --> "1" IExchangeConnector
ExchangeWatcher --> "1" ITradeBot
ExchangeWatcher --> "1" IDomainMapper
ExchangeWatcher --> "1" IExchangeAnalyzer
ExchangeWatcher --> "1" IExchangeTrader
ExchangeWatcher --> "1" IExchangeConnector
ExchangeWatcher --> "*" SecurityBalance
ExchangeWatcher --> "*" CurrencyBalance
ExchangeWatcher --> "*" Currency
ExchangeWatcher --> "1" Security
ExchangeWatcher --> "1" Currency
TradeBot --> "1" IExchangeConnector
TradeBot --> "1" IExchangeAnalyzer
TradeBot --> "1" IExchangeTrader
TradeBot --> "1" IExchangeWatcher
TradeBot --> "1" ApiService
TradeBot --> "1" LoggerService
TradeBot --> "1" AuthService
TradeBot --> "1" ITradeAlgorithm
AbstractTradeAlgorithm --> "1" IExchangeAnalyzer
AbstractTradeAlgorithm --> "1" IExchangeWatcher
AbstractTradeAlgorithm --> "1" IExchangeTrader
AbstractTradeAlgorithm --> "1" LoggerService
AbstractTradeAlgorithm --> "1" Algorithm
AbstractTradeAlgorithm --> "1" AlgorithmRun
@enduml