@startuml
interface ITradeAlgorithm<InputsType, StateType> {
    +details: Algorithm
    +name: string
    +description: string
    +inputs: InputTypes
    +main(inputs: InputsType): Promise<AlgorithmRun<InputsType, StateType>>
    +continue(id: number): Promise<AlgorithmRun<InputsType, StateType>>
    +stop(id: number): Promise<AlgorithmRun<InputsType, StateType>>
}
abstract class AbstractTradeAlgorithm<Domain extends DomainTemplate, TExchangeApi, InputsType, StateType, StopDataType> implements ITradeAlgorithm {
    #analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    #watcher: IExchangeWatcher
    #trader: IExchangeTrader<Domain>
    #stopData: Map<number, StopDataType>
    -logger: LoggerService
    +details: Algorithm
    #fixStart(inputs: InputsType, state: StateType): Promise<AlgorithmRun>
    #fixStop(id: number): Promise<AlgorithmRun>
    #fixContinue(id: number): Promise<AlgorithmRun>
    #fixFinish(id: number): Promise<AlgorithmRun>
    #fixError(id: number, error: Error): Promise<AlgorithmRun>
    #saveProgress(id: number, progress: StateType): Promise<AlgorithmRun>
    #loadProgress(id: number): Promise<AlgorithmRun>
    +{abstract} name: string
    +{abstract} description: string
    +{abstract} inputs: InputTypes
    +{abstract} main(inputs: InputsType): Promise<AlgorithmRun<InputsType, StateType>>
    +{abstract} continue(id: number): Promise<AlgorithmRun<InputsType, StateType>>
    +{abstract} stop(id: number): Promise<AlgorithmRun<InputsType, StateType>>
}
interface ITradeAlgorithmsEngine {
    +description: Algorithm[]
    +runAlgorithm(name: string, inputs: unknown): Promise<AlgorithmRun>
    +resumeAlgorithms(): Promise<void>
    +continueAlgorithm(name: string, run_id: number): Promise<AlgorithmRun>
    +stopAlgorithm(name: string, run_id: number): Promise<AlgorithmRun>
}
interface IExchangeTraderHooks<Domain extends DomainTemplate> {
    +orderSent: (order: GetOrderType<Domain>, operation_type: OperationType, runId?: number) => void
}
interface IExchangeTrader<Domain extends DomainTemplate> {
    +hooks: Hookable<IExchangeTraderHooks<Domain>, "orderSent">
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string, run_id?: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string, run_id?: number): Promise<OrderStatus>
}
interface IExchangeWatcher {
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface IExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: any
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    +start(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
}
class ExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> implements IExchangeAnalyzer {
    +storage: UnitedStorage
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +tradeAlgos: ITradeAlgorithmsEngine
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    -_tradeAlgos: ITradeAlgorithmsEngine
    -_initAlgorithmsCallback: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
    +start(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
    -loadSecurityIfNotExist(ticker: string): Promise<any>
    -loadSecuritiesIfNotExist(tickers: string[]): Promise<GetSecurityType<CommonDomain>[]>
    -updateSecuritiesList(securitiesToUpdate: GetSecurityType<CommonDomain>[]): Promise<any>
}
interface ITradeModule<Domain extends DomainTemplate> {
    +sell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +buy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketSell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketBuy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +sellOrCancel(): Promise<GetOrderType<Domain>>
    +buyOrCancel(): Promise<GetOrderType<Domain>>
}
interface IInfoModule<Domain extends DomainTemplate> {
    +getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
interface IExchangeConnector<Domain extends DomainTemplate, TExchangeApi> {
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +initAccount(): void | Promise<void>
    +getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
abstract class AbstractTradeModule<Domain extends DomainTemplate, TExchangeApi> implements ITradeModule {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} sell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} buy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketSell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketBuy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} sellOrCancel(): Promise<GetOrderType<Domain>>
    +{abstract} buyOrCancel(): Promise<GetOrderType<Domain>>
}
abstract class AbstractInfoModule<Domain extends DomainTemplate, TExchangeApi> implements IInfoModule {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +{abstract} getSecurityLastPrice(ticker: string): Promise<number>
    +{abstract} getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +{abstract} getSecurityName(ticker: string): Promise<string>
    +{abstract} getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +{abstract} getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
abstract class AbstractExchangeConnector<Domain extends DomainTemplate, TExchangeApi> implements IExchangeConnector {
    -_isAccountInitialized: boolean
    +isAccountInitialized: boolean
    #isAccountInitialized: boolean
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +{abstract} initAccount(): void | Promise<void>
    +{abstract} getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +{abstract} getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
class Algorithm {
    +name: string
    +description: string
    +inputTypes: InputTypes
    +algorithmRuns?: AlgorithmRun<any, any>[]
}
class Order {
    +exchangeId: string
    +securityTicker: string
    +status: OrderStatus
    +operation: any
    +lots: number
    +price: number
    +updatedAt?: Date
    +algorithmRunId?: number
    +algorithmRun?: AlgorithmRun<any, any>
}
class AlgorithmRun<InputType, StateType> {
    +id: number
    +algorithmName: string
    +inputs: InputType
    +status: AlgorithmRunStatus
    +state: StateType
    +updatedAt: Date
    +createdAt: Date
    +algorithm: Algorithm
    +orders: Order[]
}
class AssetBalance {
    +assetTicker: string
    +asset: Asset
    +amount: number
    +updatedAt: Date
}
class Asset {
    +ticker: string
    +name: string
    +balance: AssetBalance
    +updatedAt: Date
}
class SecurityBalance extends AssetBalance {
    +asset: Security
}
class Security extends Asset {
    +price: number
    +currency: Currency
    +currencyTicker: string
    +balance: SecurityBalance
    +isFollowed: boolean
}
class CurrencyBalance extends AssetBalance {
    +asset: Currency
}
class Currency extends Asset {
    +exchangeTicker?: string
    +securities: Security[]
    +balance: CurrencyBalance
}
abstract class AbstractDomainMapper<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IDomainMapper {
    #exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeClient(exchangeClient: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} currency(currency: GetCurrencyType<Domain>): Promise<Currency>
    +{abstract} currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<CurrencyBalance>
    +{abstract} security(security: GetSecurityType<Domain>): Promise<Security>
    +{abstract} securityBalance(portfolio: GetSecurityBalanceType<Domain>): Promise<SecurityBalance>
    +{abstract} order(order: GetOrderType<Domain>): Promise<Order>
    +{abstract} orderStatus(order: GetOrderType<Domain>): OrderStatus
    +{abstract} orderOperation(order: GetOrderType<Domain>): any
}
interface IDomainMapper<Domain extends DomainTemplate> {
    +currency(currency: GetCurrencyType<Domain>): Promise<GetCurrencyType<CommonDomain>>
    +currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<GetCurrencyBalanceType<CommonDomain>>
    +security(security: GetSecurityType<Domain>): Promise<GetSecurityType<CommonDomain>>
    +securityBalance(security: GetSecurityBalanceType<Domain>): Promise<GetSecurityBalanceType<CommonDomain>>
    +order(order: GetOrderType<Domain>): Promise<GetOrderType<CommonDomain>>
    +orderStatus(order: GetOrderType<Domain>): OrderStatus
    +orderOperation(order: GetOrderType<Domain>): OperationType
}
interface ITradeBotConfig {
    +meta: { id: string; }
    +auth: { token: string; required: boolean; }
    +api: { port: number | string; host: string; }
    +logs: { directory: string; }
}
interface ITradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +config: ITradeBotConfig
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
}
class ApiService {
    -tradebot: ITradeBot<StubDomain, unknown>
    -http: http.Server
    -configureServers(): Promise<void>
}
interface IHttpHeadersCarrier {
    +headers: IncomingHttpHeaders
}
class AuthService {
    -tradebot: ITradeBot<any, any>
    +authByToken(token?: string): boolean
    +authByRequest(request: IHttpHeadersCarrier): boolean
}
class LoggerService {
    +internalTypes: LogType[]
    +consoleLogger: ConsolaInstance
    -fileLogger: Logger
    -lastLogs: LogObject[]
    -eventEmitter: EventEmitter
    -tradebot: ITradeBot<any, any>
    +getLastLogs(): LogObject[]
    +log(message: unknown, args: unknown[]): void
    +info(message: unknown, args: unknown[]): void
    +warn(message: unknown, args: unknown[]): void
    +error(message: unknown, args: unknown[]): void
    +debug(message: unknown, args: unknown[]): void
    +fail(message: unknown, args: unknown[]): void
    +fatal(message: unknown, args: unknown[]): void
    +ready(message: unknown, args: unknown[]): void
    +silent(message: unknown, args: unknown[]): void
    +start(message: unknown, args: unknown[]): void
    +success(message: unknown, args: unknown[]): void
    +trace(message: unknown, args: unknown[]): void
    +verbose(message: unknown, args: unknown[]): void
    +subscribe(callback: (logs: LogObject) => void): void
    +unsubscribe(callback: (logs: LogObject) => void): void
    +createErrorHandlingProxy(object: T): T
    -createLogsDirIfNotExist(): void
    -logWithSpecificType(type: LogType, message: unknown, args: unknown[]): void
    -logToFile(type: LogType, message: unknown, args: unknown[]): void
    -logToConsole(type: LogType, message: unknown, args: unknown[]): void
    -logToSocket(log: LogObject): void
    -updateLastLogs(log: LogObject): void
}
class ExchangeTrader<Domain extends DomainTemplate, TExchangeApi> implements IExchangeTrader {
    +hooks: Hookable<IExchangeTraderHooks<Domain>, "orderSent">
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -watcher: IExchangeWatcher
    -logger: LoggerService
    -exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string, run_id?: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string, run_id?: number): Promise<OrderStatus>
}
class ExchangeWatcher<Domain extends DomainTemplate, TExchangeApi> implements IExchangeWatcher {
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -domainMapper: IDomainMapper<Domain>
    -analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -trader: IExchangeTrader<Domain>
    -exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface TradeBotProductionInitOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +mode: "production"
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +config?: DeepPartial<ITradeBotConfig>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
interface TradeBotNoSetupInitOptions {
    +mode: "no_setup"
}
interface TradeBotSetupOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
class TradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements ITradeBot {
    +config: ITradeBotConfig
    +exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
    -_exchangeClient: IExchangeConnector<Domain, TExchangeApi>
    -_analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -_trader: IExchangeTrader<Domain>
    -_watcher: IExchangeWatcher
    -_api: ApiService
    -_logger: LoggerService
    -_auth: AuthService
    -setup(__0: TradeBotSetupOptions<Domain, TExchangeApi>): Promise<void>
}
class TradeAlgorithmsEngine<Domain extends DomainTemplate, TExchangeApi> implements ITradeAlgorithmsEngine {
    #analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    #trader: IExchangeTrader<Domain>
    #watcher: IExchangeWatcher
    #tradebot: ITradeBot<Domain, TExchangeApi>
    #algorithms: ITradeAlgorithm[]
    +description: Algorithm[]
    +runAlgorithm(name: string, inputs: unknown): Promise<AlgorithmRun>
    +resumeAlgorithms(): Promise<void>
    +continueAlgorithm(name: string, id: number): Promise<AlgorithmRun>
    +stopAlgorithm(name: string, id: number): Promise<AlgorithmRun>
}
interface GetOrdersOptions extends ZGetOrdersOptions
interface ITypedTransformer<TEntity, TDatabase> {
    +to: (entityValue: TEntity) => TDatabase
    +from: (databaseValue: TDatabase) => TEntity
}
class AlgorithmsRepository extends Repository
class AlgorithmRunsRepository extends Repository {
    +runOne(algorithmName: string, inputs: unknown, state?: unknown): Promise<AlgorithmRun>
    +saveProgress(id: number, state: unknown): Promise<AlgorithmRun>
    +loadProgress(id: number): Promise<any>
    +stopOne(id: number): Promise<AlgorithmRun>
    +resumeOne(id: number): Promise<AlgorithmRun>
    +finishOne(id: number): Promise<AlgorithmRun>
    +storeError(id: number, error: Error): Promise<AlgorithmRun>
    +findManyByAlgorithm(algorithmName: string): Promise<AlgorithmRun[]>
    +findAllUnfinished(): Promise<AlgorithmRun[]>
}
interface IOrdersRepositoryHooks {
    +beforeSaveOne: (ticker: string) => Promise<void>
}
class OrdersRepository extends Repository {
    +hooks: Hookable<IOrdersRepositoryHooks, "beforeSaveOne">
    +saveOne(order: GetOrderType<CommonDomain>, operation: OperationType, runId?: number): Promise<GetOrderType<CommonDomain>>
    +search(options: GetOrdersOptions): Promise<GetOrderType<CommonDomain>[]>
}
interface IPersistentStorage {
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
class PersistentStorage implements IPersistentStorage {
    +isInitialized: boolean
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    -_orders: OrdersRepository
    -_algorithms: AlgorithmsRepository
    -_algorithmRuns: AlgorithmRunsRepository
    -id: string
    +initialize(): Promise<void>
    -datasource: DataSource
}
class SecuritiesRepository extends Repository {
    +findByTicker(securityTicker: string): Promise<Security>
    +findByTickers(securityTickers: string[]): Promise<Security[]>
    +findAllFollowed(): Promise<Security[]>
    +follow(securityTicker: string): Promise<any>
    +unfollow(securityTicker: string): Promise<any>
    +updateAll(securities: Security[]): Promise<void>
}
class PortfolioRepository extends Repository {
    +securities: Repository<SecurityBalance>
    +currencies: Repository<CurrencyBalance>
    +findPositions(options?: FindManyOptions<AssetBalance>): Promise<any[]>
}
class CurrenciesRepository extends Repository {
    +findByTicker(currencyTicker: string): Promise<Currency>
    +updateAll(currencies: Currency[]): Promise<void>
}
interface IInMemoryStorage {
    +securities: SecuritiesRepository
    +portfolio: PortfolioRepository
    +currencies: CurrenciesRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
class InMemoryStorage implements IInMemoryStorage {
    +isInitialized: boolean
    +securities: SecuritiesRepository
    +currencies: CurrenciesRepository
    +portfolio: PortfolioRepository
    -_securities: SecuritiesRepository
    -_portfolio: PortfolioRepository
    -_currencies: CurrenciesRepository
    -datasource: DataSource
    +initialize(): Promise<void>
}
class UnitedStorage implements IPersistentStorage, IInMemoryStorage {
    +isInitialized: boolean
    +currencies: CurrenciesRepository
    +portfolio: PortfolioRepository
    +securities: SecuritiesRepository
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    -_persistent: IPersistentStorage
    -_memory: IInMemoryStorage
    -id: string
    +initialize(): Promise<void>
}
class StubExchangeState {
    +db: DataSource
    +isInitialized: boolean
    +initialize(): Promise<void>
    -fillDatabase(ExchangeDataSource: DataSource): Promise<void>
}
class StubExchangeApi {
    +state: StubExchangeState
    +isInitialized: boolean
    +initialize(): Promise<void>
    +getPortfolio(): Promise<SecurityBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
    +getCurrencies(): Promise<Currency[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<Currency>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string): Promise<any>
    +sell(options: CreateOrderOptions): Promise<Order>
    +buy(options: CreateOrderOptions): Promise<Order>
    +marketSell(options: CreateOrderOptions): Promise<Order>
    +marketBuy(options: CreateOrderOptions): Promise<Order>
}
class DomainMapper extends AbstractDomainMapper {
    +currency(currency: Currency): Promise<Currency>
    +currencyBalance(currencyBalance: CurrencyBalance): Promise<CurrencyBalance>
    +security(security: Security): Promise<Security>
    +securityBalance(portfolio: SecurityBalance): Promise<SecurityBalance>
    +order(order: Order): Promise<Order>
    +orderOperation(order: Order): "undefined" | "limit_buy" | "limit_sell" | "market_buy" | "market_sell" | "buy_or_cancel" | "sell_or_cancel"
    +orderStatus(order: Order): OrderStatus
}
class ExchangeConnector extends AbstractExchangeConnector {
    +initAccount(): void
    +getPortfolio(): Promise<SecurityBalance[]>
    +getCurrenciesBalance(): Promise<CurrencyBalance[]>
}
class TradeModule extends AbstractTradeModule {
    +sell(options: CreateOrderOptions): Promise<Order>
    +buy(options: CreateOrderOptions): Promise<Order>
    +marketSell(options: CreateOrderOptions): Promise<Order>
    +marketBuy(options: CreateOrderOptions): Promise<Order>
    +sellOrCancel(): Promise<Order>
    +buyOrCancel(): Promise<Order>
}
class InfoModule extends AbstractInfoModule {
    +getCurrencies(): Promise<Currency[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<Currency>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
ITradeAlgorithm --> "1" Algorithm
ITradeAlgorithm --> "1" AlgorithmRun
AbstractTradeAlgorithm --> "1" IExchangeAnalyzer
AbstractTradeAlgorithm --> "1" IExchangeWatcher
AbstractTradeAlgorithm --> "1" IExchangeTrader
AbstractTradeAlgorithm --> "1" LoggerService
AbstractTradeAlgorithm --> "1" Algorithm
AbstractTradeAlgorithm --> "1" AlgorithmRun
ITradeAlgorithmsEngine --> "*" Algorithm
ITradeAlgorithmsEngine --> "1" AlgorithmRun
IExchangeTrader --> "1" IExchangeTraderHooks
IExchangeAnalyzer --> "1" ITradeAlgorithmsEngine
IExchangeAnalyzer --> "1" ITradeBot
IExchangeAnalyzer --> "1" IExchangeTrader
IExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" UnitedStorage
ExchangeAnalyzer --> "1" ITradeBot
ExchangeAnalyzer --> "1" ITradeAlgorithmsEngine
ExchangeAnalyzer --> "1" IExchangeTrader
ExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" IExchangeAnalyzer
ExchangeAnalyzer --> "*" ITradeAlgorithm
IExchangeConnector --> "1" ITradeModule
IExchangeConnector --> "1" IInfoModule
IExchangeConnector --> "1" IDomainMapper
AbstractTradeModule --> "1" IExchangeConnector
AbstractInfoModule --> "1" IExchangeConnector
AbstractExchangeConnector --> "1" ITradeModule
AbstractExchangeConnector --> "1" IInfoModule
AbstractExchangeConnector --> "1" IDomainMapper
Algorithm --> "1" AlgorithmRun
Order --> "1" AlgorithmRun
AlgorithmRun --> "1" Algorithm
AlgorithmRun --> "*" Order
AssetBalance --> "1" Asset
Asset --> "1" AssetBalance
SecurityBalance --> "1" Security
Security --> "1" Currency
Security --> "1" SecurityBalance
CurrencyBalance --> "1" Currency
Currency --> "*" Security
Currency --> "1" CurrencyBalance
AbstractDomainMapper --> "1" IExchangeConnector
AbstractDomainMapper --> "1" Currency
AbstractDomainMapper --> "1" CurrencyBalance
AbstractDomainMapper --> "1" Security
AbstractDomainMapper --> "1" SecurityBalance
AbstractDomainMapper --> "1" Order
ITradeBot --> "1" ITradeBotConfig
ITradeBot --> "1" IExchangeConnector
ITradeBot --> "1" IExchangeAnalyzer
ITradeBot --> "1" IExchangeTrader
ITradeBot --> "1" IExchangeWatcher
ITradeBot --> "1" ApiService
ITradeBot --> "1" LoggerService
ITradeBot --> "1" AuthService
ApiService --> "1" ITradeBot
AuthService --> "1" ITradeBot
AuthService --> "1" IHttpHeadersCarrier
LoggerService --> "1" ITradeBot
ExchangeTrader --> "1" IExchangeTraderHooks
ExchangeTrader --> "1" ITradeBot
ExchangeTrader --> "1" IExchangeWatcher
ExchangeTrader --> "1" LoggerService
ExchangeTrader --> "1" IExchangeConnector
ExchangeWatcher --> "1" ITradeBot
ExchangeWatcher --> "1" IDomainMapper
ExchangeWatcher --> "1" IExchangeAnalyzer
ExchangeWatcher --> "1" IExchangeTrader
ExchangeWatcher --> "1" IExchangeConnector
TradeBotProductionInitOptions --> "1" IExchangeConnector
TradeBotProductionInitOptions --> "1" ITradeBotConfig
TradeBotProductionInitOptions --> "1" IExchangeAnalyzer
TradeBotProductionInitOptions --> "*" ITradeAlgorithm
TradeBotSetupOptions --> "1" IExchangeConnector
TradeBotSetupOptions --> "1" IExchangeAnalyzer
TradeBotSetupOptions --> "*" ITradeAlgorithm
TradeBot --> "1" ITradeBotConfig
TradeBot --> "1" IExchangeConnector
TradeBot --> "1" IExchangeAnalyzer
TradeBot --> "1" IExchangeTrader
TradeBot --> "1" IExchangeWatcher
TradeBot --> "1" ApiService
TradeBot --> "1" LoggerService
TradeBot --> "1" AuthService
TradeBot --> "1" TradeBotSetupOptions
TradeAlgorithmsEngine --> "1" IExchangeAnalyzer
TradeAlgorithmsEngine --> "1" IExchangeTrader
TradeAlgorithmsEngine --> "1" IExchangeWatcher
TradeAlgorithmsEngine --> "1" ITradeBot
TradeAlgorithmsEngine --> "*" ITradeAlgorithm
TradeAlgorithmsEngine --> "*" Algorithm
TradeAlgorithmsEngine --> "1" AlgorithmRun
AlgorithmRunsRepository --> "1" AlgorithmRun
AlgorithmRunsRepository --> "*" AlgorithmRun
OrdersRepository --> "1" IOrdersRepositoryHooks
OrdersRepository --> "1" GetOrdersOptions
IPersistentStorage --> "1" OrdersRepository
IPersistentStorage --> "1" AlgorithmsRepository
IPersistentStorage --> "1" AlgorithmRunsRepository
PersistentStorage --> "1" OrdersRepository
PersistentStorage --> "1" AlgorithmsRepository
PersistentStorage --> "1" AlgorithmRunsRepository
SecuritiesRepository --> "1" Security
SecuritiesRepository --> "*" Security
PortfolioRepository --> "1" SecurityBalance
PortfolioRepository --> "1" CurrencyBalance
PortfolioRepository --> "1" AssetBalance
CurrenciesRepository --> "1" Currency
IInMemoryStorage --> "1" SecuritiesRepository
IInMemoryStorage --> "1" PortfolioRepository
IInMemoryStorage --> "1" CurrenciesRepository
InMemoryStorage --> "1" SecuritiesRepository
InMemoryStorage --> "1" CurrenciesRepository
InMemoryStorage --> "1" PortfolioRepository
UnitedStorage --> "1" CurrenciesRepository
UnitedStorage --> "1" PortfolioRepository
UnitedStorage --> "1" SecuritiesRepository
UnitedStorage --> "1" OrdersRepository
UnitedStorage --> "1" AlgorithmsRepository
UnitedStorage --> "1" AlgorithmRunsRepository
UnitedStorage --> "1" IPersistentStorage
UnitedStorage --> "1" IInMemoryStorage
StubExchangeApi --> "1" StubExchangeState
StubExchangeApi --> "*" SecurityBalance
StubExchangeApi --> "*" CurrencyBalance
StubExchangeApi --> "*" Currency
StubExchangeApi --> "1" Currency
StubExchangeApi --> "1" Order
DomainMapper --> "1" Currency
DomainMapper --> "1" CurrencyBalance
DomainMapper --> "1" Security
DomainMapper --> "1" SecurityBalance
DomainMapper --> "1" Order
ExchangeConnector --> "*" SecurityBalance
ExchangeConnector --> "*" CurrencyBalance
TradeModule --> "1" Order
InfoModule --> "*" Currency
InfoModule --> "1" Currency
@enduml