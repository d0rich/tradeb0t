@startuml
interface ITradeAlgorithm<InputsType, StateType> {
    +details: Algorithm
    +name: string
    +description: string
    +inputs: InputTypes
    +main(inputs: InputsType): Promise<AlgorithmRun<InputsType, StateType>>
    +resume(id: number): Promise<AlgorithmRun<InputsType, StateType>>
    +stop(id: number): Promise<AlgorithmRun<InputsType, StateType>>
}
interface ITradeAlgorithmsEngine {
    +description: Algorithm[]
    +runAlgorithm(name: string, inputs: unknown): Promise<AlgorithmRun>
    +resumeAlgorithms(): Promise<void>
    +resumeAlgorithm(name: string, run_id: number): Promise<AlgorithmRun>
    +stopAlgorithm(name: string, run_id: number): Promise<AlgorithmRun>
}
interface IExchangeTraderHooks<Domain extends DomainTemplate> {
    +orderSent: (order: GetOrderType<Domain>, operation_type: OperationType, runId?: number) => void
}
interface IExchangeTrader<Domain extends DomainTemplate> {
    +hooks: Hookable<IExchangeTraderHooks<Domain>, "orderSent">
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string, run_id?: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string, run_id?: number): Promise<OrderStatus>
}
interface IExchangeWatcher {
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface IExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: any
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    +start(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
}
interface ITradeModule<Domain extends DomainTemplate> {
    +sell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +buy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketSell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketBuy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +sellOrCancel(): Promise<GetOrderType<Domain>>
    +buyOrCancel(): Promise<GetOrderType<Domain>>
}
interface IInfoModule<Domain extends DomainTemplate> {
    +getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
interface IExchangeConnector<Domain extends DomainTemplate, TExchangeApi> {
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +initAccount(): void | Promise<void>
    +getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
interface IDomainMapper<Domain extends DomainTemplate> {
    +currency(currency: GetCurrencyType<Domain>): Promise<GetCurrencyType<CommonDomain>>
    +currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<GetCurrencyBalanceType<CommonDomain>>
    +security(security: GetSecurityType<Domain>): Promise<GetSecurityType<CommonDomain>>
    +securityBalance(security: GetSecurityBalanceType<Domain>): Promise<GetSecurityBalanceType<CommonDomain>>
    +order(order: GetOrderType<Domain>): Promise<GetOrderType<CommonDomain>>
    +orderStatus(order: GetOrderType<Domain>): OrderStatus
    +orderOperation(order: GetOrderType<Domain>): OperationType
}
interface ITradeBotConfig {
    +meta: { id: string; }
    +auth: { token: string; required: boolean; }
    +api: { port: number | string; host: string; }
    +logs: { directory: string; }
}
interface ITradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +config: ITradeBotConfig
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader<Domain>
    +watcher: IExchangeWatcher
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
}
interface IHttpHeadersCarrier {
    +headers: IncomingHttpHeaders
}
interface TradeBotInitOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +config?: DeepPartial<ITradeBotConfig>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
interface TradeBotSetupOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
interface GetOrdersOptions extends ZGetOrdersOptions
interface ITypedTransformer<TEntity, TDatabase> {
    +to: (entityValue: TEntity) => TDatabase
    +from: (databaseValue: TDatabase) => TEntity
}
interface IOrdersRepositoryHooks {
    +beforeSaveOne: (ticker: string) => Promise<void>
}
interface IPersistentStorage {
    +orders: OrdersRepository
    +algorithms: AlgorithmsRepository
    +algorithmRuns: AlgorithmRunsRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
interface IInMemoryStorage {
    +securities: SecuritiesRepository
    +portfolio: PortfolioRepository
    +currencies: CurrenciesRepository
    +isInitialized: boolean
    +initialize(): Promise<void>
}
IExchangeTrader --> "1" IExchangeTraderHooks
IExchangeAnalyzer --> "1" ITradeAlgorithmsEngine
IExchangeAnalyzer --> "1" ITradeBot
IExchangeAnalyzer --> "1" IExchangeTrader
IExchangeAnalyzer --> "1" IExchangeWatcher
IExchangeConnector --> "1" ITradeModule
IExchangeConnector --> "1" IInfoModule
IExchangeConnector --> "1" IDomainMapper
ITradeBot --> "1" ITradeBotConfig
ITradeBot --> "1" IExchangeConnector
ITradeBot --> "1" IExchangeAnalyzer
ITradeBot --> "1" IExchangeTrader
ITradeBot --> "1" IExchangeWatcher
TradeBotInitOptions --> "1" IExchangeConnector
TradeBotInitOptions --> "1" ITradeBotConfig
TradeBotInitOptions --> "1" IExchangeAnalyzer
TradeBotInitOptions --> "*" ITradeAlgorithm
TradeBotSetupOptions --> "1" IExchangeConnector
TradeBotSetupOptions --> "1" IExchangeAnalyzer
TradeBotSetupOptions --> "*" ITradeAlgorithm
@enduml