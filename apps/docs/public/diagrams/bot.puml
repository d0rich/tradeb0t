@startuml
interface IExchangeTraderHooks {
    +orderSent: (order: GetOrderType<CommonDomain>, operation_type: OperationType, runId: number) => void
}
interface IExchangeTrader {
    +hooks: Hookable<IExchangeTraderHooks, "orderSent">
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name?: string, run_id?: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name?: string, run_id?: number): Promise<OrderStatus>
}
interface IExchangeWatcher {
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface IExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> {
    +tradeAlgos: ITradeAlgorithmsEngine
    +storage: any
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    +initialize(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
}
class ExchangeAnalyzer<Domain extends DomainTemplate, TExchangeApi> implements IExchangeAnalyzer {
    +storage: UnitedStorage
    +tradebot: ITradeBot<Domain, TExchangeApi>
    +tradeAlgos: ITradeAlgorithmsEngine
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    -_tradeAlgos: ITradeAlgorithmsEngine
    +initialize(): Promise<void>
    +updateCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +updateCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +updateSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updateFollowedSecurities(): Promise<GetSecurityType<CommonDomain>[]>
    +updatePortfolio(): Promise<GetPortfolioPositionType<CommonDomain>[]>
    -_initAlgorithmsCallback: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
    -loadSecurityIfNotExist(ticker: string): Promise<any>
    -loadSecuritiesIfNotExist(tickers: string[]): Promise<GetSecurityType<CommonDomain>[]>
    -updateSecuritiesList(securitiesToUpdate: GetSecurityType<CommonDomain>[]): Promise<any>
}
interface ITradeModule<Domain extends DomainTemplate> {
    +sell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +buy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketSell(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +marketBuy(options: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +sellOrCancel(): Promise<GetOrderType<Domain>>
    +buyOrCancel(): Promise<GetOrderType<Domain>>
}
interface IInfoModule<Domain extends DomainTemplate> {
    +getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
interface IExchangeConnector<Domain extends DomainTemplate, TExchangeApi> {
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +initAccount(): void | Promise<void>
    +getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
}
abstract class AbstractTradeModule<Domain extends DomainTemplate, TExchangeApi> implements ITradeModule {
    #exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeConnector(exchangeConnector: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} sell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} buy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketSell(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} marketBuy(__0: CreateOrderOptions): Promise<GetOrderType<Domain>>
    +{abstract} sellOrCancel(): Promise<GetOrderType<Domain>>
    +{abstract} buyOrCancel(): Promise<GetOrderType<Domain>>
}
abstract class AbstractInfoModule<Domain extends DomainTemplate, TExchangeApi> implements IInfoModule {
    #exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeConnector(exchangeConnector: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} getCurrencies(): Promise<GetCurrencyType<Domain>[]>
    +{abstract} getSecurityLastPrice(ticker: string): Promise<number>
    +{abstract} getSecurityCurrency(ticker: string): Promise<GetCurrencyType<Domain>>
    +{abstract} getSecurityName(ticker: string): Promise<string>
    +{abstract} getSecurity(ticker: string, ignoreCache?: boolean): Promise<any>
    +{abstract} getSecurityByExchangeId(id: string, ignoreCache?: boolean): Promise<any>
}
abstract class AbstractExchangeConnector<Domain extends DomainTemplate, TExchangeApi> implements IExchangeConnector {
    +api: TExchangeApi
    +tradeModule: ITradeModule<Domain>
    +infoModule: IInfoModule<Domain>
    +domainMapper: IDomainMapper<Domain>
    +{abstract} initAccount(): void | Promise<void>
    +{abstract} getPortfolio(): Promise<GetSecurityBalanceType<Domain>[]>
    +{abstract} getCurrenciesBalance(): Promise<GetCurrencyBalanceType<Domain>[]>
    +isAccountInitialized: boolean
    #isAccountInitialized: boolean
    -_isAccountInitialized: boolean
}
enum EInputType {
    STRING
    NUMBER
    ORDER_DETAILS
    DATE
}
class Algorithm {
    +name: string
    +description: string
    +inputTypes: InputTypes
    +algorithmRuns?: AlgorithmRun<any, any>[]
}
enum EOrderStatus {
    NOT_PROCESSED
    TO_BE_PROCESSED
    PLACED
    UNITS_ALLOCATED
    UNITS_REDEEMED
    REJECTED
    CANCELLED
    EXPIRED
    UNDEFINED
}
enum EOperationType {
    LIMIT_BUY
    LIMIT_SELL
    MARKET_BUY
    MARKET_SELL
    BUY_OR_CANCEL
    SELL_OR_CANCEL
    UNDEFINED
}
class Order {
    +exchangeId: string
    +securityTicker: string
    +status: OrderStatus
    +operation: OperationType
    +lots: number
    +price: number
    +updatedAt?: Date
    +algorithmRunId?: number
    +algorithmRun?: AlgorithmRun<any, any>
}
enum EAlgorithmRunStatus {
    RUNNING
    STOPPED
    RESUMED
    FINISHED
    ERROR
}
class AlgorithmRun<InputType, StateType> {
    +id: number
    +algorithmName: string
    +inputs: InputType
    +status: AlgorithmRunStatus
    +state: StateType
    +updatedAt: Date
    +createdAt: Date
    +algorithm: Algorithm
    +orders: Order[]
}
class AssetBalance {
    +assetTicker: string
    +asset: Asset
    +amount: number
    +updatedAt: Date
}
class Asset {
    +ticker: string
    +name: string
    +balance: AssetBalance
    +updatedAt: Date
}
class SecurityBalance extends AssetBalance {
    +asset: Security
}
class Security extends Asset {
    +price: number
    +currency: Currency
    +currencyTicker: string
    +balance: SecurityBalance
    +isFollowed: boolean
}
class CurrencyBalance extends AssetBalance {
    +asset: Currency
}
class Currency extends Asset {
    +exchangeTicker?: string
    +securities: Security[]
    +balance: CurrencyBalance
}
abstract class AbstractDomainMapper<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements IDomainMapper {
    #exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +setExchangeConnector(exchangeConnector: IExchangeConnector<Domain, TExchangeApi>): void
    +{abstract} currency(currency: GetCurrencyType<Domain>): Promise<Currency>
    +{abstract} currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<CurrencyBalance>
    +{abstract} security(security: GetSecurityType<Domain>): Promise<Security>
    +{abstract} securityBalance(portfolio: GetSecurityBalanceType<Domain>): Promise<SecurityBalance>
    +{abstract} order(order: GetOrderType<Domain>): Promise<Order>
    +{abstract} orderStatus(order: GetOrderType<Domain>): OrderStatus
    +{abstract} orderOperation(order: GetOrderType<Domain>): OperationType
}
interface IDomainMapper<Domain extends DomainTemplate> {
    +currency(currency: GetCurrencyType<Domain>): Promise<GetCurrencyType<CommonDomain>>
    +currencyBalance(currency: GetCurrencyBalanceType<Domain>): Promise<GetCurrencyBalanceType<CommonDomain>>
    +security(security: GetSecurityType<Domain>): Promise<GetSecurityType<CommonDomain>>
    +securityBalance(security: GetSecurityBalanceType<Domain>): Promise<GetSecurityBalanceType<CommonDomain>>
    +order(order: GetOrderType<Domain>): Promise<GetOrderType<CommonDomain>>
    +orderStatus(order: GetOrderType<Domain>): OrderStatus
    +orderOperation(order: GetOrderType<Domain>): OperationType
}
interface ITradeBotConfig {
    +meta: { id: string; }
    +auth: { token: string; required: boolean; }
    +api: { port: number | string; host: string; }
    +logs: { directory: string; }
}
interface ITradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +config: ITradeBotConfig
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
}
class ApiService {
    -tradebot: ITradeBot<StubDomain, unknown>
    -http: http.Server
    -configureServers(): Promise<void>
}
interface IHttpHeadersCarrier {
    +headers: IncomingHttpHeaders
}
class AuthService {
    -tradebot: ITradeBot<any, any>
    +authByToken(token?: string): boolean
    +authByRequest(request: IHttpHeadersCarrier): boolean
}
class LoggerService {
    +internalTypes: LogType[]
    +consoleLogger: ConsolaInstance
    -fileLogger: Logger
    -lastLogs: LogObject[]
    -eventEmitter: EventEmitter
    -tradebot: ITradeBot<any, any>
    +getLastLogs(): LogObject[]
    +log(message: unknown, args: unknown[]): void
    +info(message: unknown, args: unknown[]): void
    +warn(message: unknown, args: unknown[]): void
    +error(message: unknown, args: unknown[]): void
    +debug(message: unknown, args: unknown[]): void
    +fail(message: unknown, args: unknown[]): void
    +fatal(message: unknown, args: unknown[]): void
    +ready(message: unknown, args: unknown[]): void
    +silent(message: unknown, args: unknown[]): void
    +start(message: unknown, args: unknown[]): void
    +success(message: unknown, args: unknown[]): void
    +trace(message: unknown, args: unknown[]): void
    +verbose(message: unknown, args: unknown[]): void
    +subscribe(callback: (logs: LogObject) => void): void
    +unsubscribe(callback: (logs: LogObject) => void): void
    +createErrorHandlingProxy(object: T): T
    -createLogsDirIfNotExist(): void
    -logWithSpecificType(type: LogType, message: unknown, args: unknown[]): void
    -logToFile(type: LogType, message: unknown, args: unknown[]): void
    -logToConsole(type: LogType, message: unknown, args: unknown[]): void
    -logToSocket(log: LogObject): void
    -updateLastLogs(log: LogObject): void
}
class ExchangeTrader<Domain extends DomainTemplate, TExchangeApi> implements IExchangeTrader {
    +hooks: Hookable<IExchangeTraderHooks, "orderSent">
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -watcher: IExchangeWatcher
    -logger: LoggerService
    -exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    -domainMapper: IDomainMapper<Domain>
    +scheduleAction(action: JobCallback, date: Date): Job
    +scheduleOrder(date: Date, order: CreateOrderOptions, algorithm_name: string, run_id: number): Job
    +sendOrder(orderDetails: CreateOrderOptions, algorithm_name: string, run_id: number): Promise<OrderStatus>
}
class ExchangeWatcher<Domain extends DomainTemplate, TExchangeApi> implements IExchangeWatcher {
    -tradebot: ITradeBot<Domain, TExchangeApi>
    -domainMapper: IDomainMapper<Domain>
    -analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -trader: IExchangeTrader
    -exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +getPortfolio(): Promise<GetSecurityBalanceType<CommonDomain>[]>
    +getCurrenciesBalance(): Promise<GetCurrencyBalanceType<CommonDomain>[]>
    +getCurrencies(): Promise<GetCurrencyType<CommonDomain>[]>
    +getSecurity(ticker: string): Promise<GetSecurityType<CommonDomain>>
    +getSecurityName(ticker: string): Promise<string>
    +getSecurityLastPrice(ticker: string): Promise<number>
    +getSecurityCurrency(ticker: string): Promise<GetCurrencyType<CommonDomain>>
}
interface TradeBotInitOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +config?: DeepPartial<ITradeBotConfig>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
interface TradeBotSetupOptions<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> {
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +initAlgorithmsCallback?: (analyzer: IExchangeAnalyzer<Domain, TExchangeApi>) => ITradeAlgorithm[]
}
class TradeBot<Domain extends DomainTemplate<unknown, unknown, unknown, unknown, unknown>, TExchangeApi> implements ITradeBot {
    +config: ITradeBotConfig
    +exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    +analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    +trader: IExchangeTrader
    +watcher: IExchangeWatcher
    +api: ApiService
    +logger: LoggerService
    +auth: AuthService
    -_exchangeConnector: IExchangeConnector<Domain, TExchangeApi>
    -_analyzer: IExchangeAnalyzer<Domain, TExchangeApi>
    -_trader: IExchangeTrader
    -_watcher: IExchangeWatcher
    -_api: ApiService
    -_logger: LoggerService
    -_auth: AuthService
    -setup(__0: TradeBotSetupOptions<Domain, TExchangeApi>): Promise<void>
}
IExchangeTrader --> "1" IExchangeTraderHooks
IExchangeAnalyzer --> "1" ITradeBot
IExchangeAnalyzer --> "1" IExchangeTrader
IExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" ITradeBot
ExchangeAnalyzer --> "1" IExchangeTrader
ExchangeAnalyzer --> "1" IExchangeWatcher
ExchangeAnalyzer --> "1" IExchangeAnalyzer
IExchangeConnector --> "1" ITradeModule
IExchangeConnector --> "1" IInfoModule
IExchangeConnector --> "1" IDomainMapper
AbstractTradeModule --> "1" IExchangeConnector
AbstractInfoModule --> "1" IExchangeConnector
AbstractExchangeConnector --> "1" ITradeModule
AbstractExchangeConnector --> "1" IInfoModule
AbstractExchangeConnector --> "1" IDomainMapper
Algorithm --> "1" AlgorithmRun
Order --> "1" AlgorithmRun
AlgorithmRun --> "1" Algorithm
AlgorithmRun --> "*" Order
AssetBalance --> "1" Asset
Asset --> "1" AssetBalance
SecurityBalance --> "1" Security
Security --> "1" Currency
Security --> "1" SecurityBalance
CurrencyBalance --> "1" Currency
Currency --> "*" Security
Currency --> "1" CurrencyBalance
AbstractDomainMapper --> "1" IExchangeConnector
AbstractDomainMapper --> "1" Currency
AbstractDomainMapper --> "1" CurrencyBalance
AbstractDomainMapper --> "1" Security
AbstractDomainMapper --> "1" SecurityBalance
AbstractDomainMapper --> "1" Order
ITradeBot --> "1" ITradeBotConfig
ITradeBot --> "1" IExchangeConnector
ITradeBot --> "1" IExchangeAnalyzer
ITradeBot --> "1" IExchangeTrader
ITradeBot --> "1" IExchangeWatcher
ITradeBot --> "1" ApiService
ITradeBot --> "1" LoggerService
ITradeBot --> "1" AuthService
ApiService --> "1" ITradeBot
AuthService --> "1" ITradeBot
AuthService --> "1" IHttpHeadersCarrier
LoggerService --> "1" ITradeBot
ExchangeTrader --> "1" IExchangeTraderHooks
ExchangeTrader --> "1" ITradeBot
ExchangeTrader --> "1" IExchangeWatcher
ExchangeTrader --> "1" LoggerService
ExchangeTrader --> "1" IExchangeConnector
ExchangeTrader --> "1" IDomainMapper
ExchangeWatcher --> "1" ITradeBot
ExchangeWatcher --> "1" IDomainMapper
ExchangeWatcher --> "1" IExchangeAnalyzer
ExchangeWatcher --> "1" IExchangeTrader
ExchangeWatcher --> "1" IExchangeConnector
TradeBotInitOptions --> "1" IExchangeConnector
TradeBotInitOptions --> "1" ITradeBotConfig
TradeBotInitOptions --> "1" IExchangeAnalyzer
TradeBotSetupOptions --> "1" IExchangeConnector
TradeBotSetupOptions --> "1" IExchangeAnalyzer
TradeBot --> "1" ITradeBotConfig
TradeBot --> "1" IExchangeConnector
TradeBot --> "1" IExchangeAnalyzer
TradeBot --> "1" IExchangeTrader
TradeBot --> "1" IExchangeWatcher
TradeBot --> "1" ApiService
TradeBot --> "1" LoggerService
TradeBot --> "1" AuthService
TradeBot --> "1" TradeBotSetupOptions
@enduml